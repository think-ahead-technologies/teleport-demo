name: "Scaleway instances demo: deploy"
on:
  workflow_dispatch:
#   push:
#     branches:
#     - main

jobs:
  deploy-db:
    runs-on: ubuntu-24.04
    env:
      # For terraform provider access to Scaleway bucket
      AWS_ACCESS_KEY_ID: ${{ secrets.SCW_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SCW_SECRET_KEY }}

      # For terraform itself to access Scaleway
      TF_VAR_SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
      TF_VAR_SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
      TF_VAR_SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_PROJECT_ID }}
      TF_VAR_SCW_DEFAULT_ORGANISATION_ID: ${{ secrets.SCW_ORGANISATION_ID }}

      # For Azure
      TF_VAR_ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      TF_VAR_ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      TF_VAR_ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    defaults:
      run:
        working-directory: ./terraform-common/database/

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3

      - name: Set up SSH private key
        run: mkdir ~/.ssh && echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode >~/.ssh/id_ed25519

      - run: terraform init

      - run: terraform validate

      - run: terraform fmt -recursive -check

      - run: terraform plan -out=plan.tfplan

      - run: terraform apply plan.tfplan

  deploy-teleport:
    needs: deploy-db
    runs-on: ubuntu-24.04
    env:
      # For terraform provider access to Scaleway bucket
      AWS_ACCESS_KEY_ID: ${{ secrets.SCW_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SCW_SECRET_KEY }}

      # For terraform itself to access Scaleway
      TF_VAR_SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
      TF_VAR_SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
      TF_VAR_SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_PROJECT_ID }}
      TF_VAR_SCW_DEFAULT_ORGANISATION_ID: ${{ secrets.SCW_ORGANISATION_ID }}

      # For Azure
      TF_VAR_ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      TF_VAR_ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      TF_VAR_ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    defaults:
      run:
        working-directory: ./scaleway-instances

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3

      - name: Set up SSH private key
        run: mkdir ~/.ssh && echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode >~/.ssh/id_ed25519

      - run: terraform init

      - run: terraform validate

      - run: terraform fmt -recursive -check

      - run: terraform plan -out=plan.tfplan

      - run: terraform apply plan.tfplan

  setup-saml:
    name: Setup SAML
    needs: deploy-teleport
    permissions:
      # The "id-token: write" permission is required or Machine ID will not be
      # able to authenticate with the cluster.
      id-token: write
      contents: read
    runs-on: ubuntu-24.04
    env:
      TELEPORT_PROXY_ADDR: teleport.thinkahead.dev:443
    defaults:
      run:
        working-directory: ./scaleway-instances
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch Teleport binaries
        uses: teleport-actions/setup@v1
        with:
          version: 15.3.7

      - name: Wait for server to be able to process authentication
        run: |
          for i in $(seq 1 30); do
            if [ "$(curl -X POST https://${TELEPORT_PROXY_ADDR}/v1/webapi/host/credentials -s -o /dev/null -w "%{http_code}")" != "000" ]; then
              exit 0
            fi
            echo "Server currently unavailable. Retrying..."
            sleep 3
          done
          echo "Server unable to process authentication using Machine ID" >&2
          exit 1

      - name: Fetch credentials using Machine ID
        id: auth
        uses: teleport-actions/auth@v2
        with:
          # Use the address of the auth/proxy server for your own cluster.
          proxy: ${{ env.TELEPORT_PROXY_ADDR }}
          # Use the name of the join token resource you created in step 1.
          token: bot-teleport-demo-repo-token
          # Specify the length of time that the generated credentials should be
          # valid for. This is optional and defaults to "1h"
          certificate-ttl: 1h

      - name: Set up Microsoft Active Directory access
        run: tctl create -f teleport/azure-connector.yaml

  deploy-extra-resources:
    needs: [deploy-teleport]
    runs-on: ubuntu-24.04
    permissions:
      # The "id-token: write" permission is required or Machine ID will not be
      # able to authenticate with the cluster.
      id-token: write
      contents: read
    env:
      # For terraform provider access to Scaleway bucket
      AWS_ACCESS_KEY_ID: ${{ secrets.SCW_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SCW_SECRET_KEY }}

      # For terraform itself to access Scaleway
      TF_VAR_SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
      TF_VAR_SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
      TF_VAR_SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_PROJECT_ID }}
      TF_VAR_SCW_DEFAULT_ORGANISATION_ID: ${{ secrets.SCW_ORGANISATION_ID }}

      # For Azure
      TF_VAR_ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      TF_VAR_ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      TF_VAR_ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      TELEPORT_PROXY_ADDR: teleport.thinkahead.dev:443

    defaults:
      run:
        working-directory: ./terraform-common/teleport-targets/

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3

        # https://github.com/teleport-actions/setup
      - name: Set up teleport
        uses: teleport-actions/setup@v1
        with:
          version: 15.3.7

      - name: Fetch credentials using Machine ID [NB if this fails, check /terraform-common/teleport-targets/README.md]
        id: auth
        uses: teleport-actions/auth@v2
        with:
          # Use the address of the auth/proxy server for your own cluster.
          proxy: ${{ env.TELEPORT_PROXY_ADDR }}
          # Use the name of the join token resource you created in step 1.
          token: bot-teleport-demo-repo-token
          # Specify the length of time that the generated credentials should be
          # valid for. This is optional and defaults to "1h"
          certificate-ttl: 1h

      - run: make tokens

      - name: generate disposable ssh key
        run: ssh-keygen -t rsa -b 4096 -N "" -C "Disposable CI pipeline key" -f ~/.ssh/id_rsa

      - run: terraform init

      - run: terraform validate

      - run: terraform fmt -recursive -check

      - run: terraform plan -out=plan.tfplan

      - run: terraform apply plan.tfplan
